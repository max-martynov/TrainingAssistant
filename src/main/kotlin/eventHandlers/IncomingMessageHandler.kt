package eventHandlers

import Client
import ClientsRepository
import Status
import TrainingPlansRepository
import api.qiwi.QiwiApiClient
import api.vk.*
import com.petersamokhin.vksdk.core.model.event.IncomingMessage
import kotlinx.coroutines.*
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.json.Json
import pressStartKeyboard
import productId
import stateHandlers.*
import java.lang.management.ManagementFactory


class IncomingMessageHandler(
    private val clientsRepository: ClientsRepository,
    private val vKApiClient: VKApiClient,
    private val trainingPlansRepository: TrainingPlansRepository,
    private val qiwiApiClient: QiwiApiClient
) {

    suspend fun receiveMessage(incomingMessage: IncomingMessage) {
        val clientId = incomingMessage.fromId
        val text = incomingMessage.text
        val attachments = incomingMessage.attachments

        println("Current number of threads = ${ManagementFactory.getThreadMXBean().threadCount}")

        val client = clientsRepository.findById(clientId)

        if (client == null && attachments.isNotEmpty() && isOurProduct(attachments[0].toString())) {
            registerNewClient(clientId)
        }
        else if (client != null) {
            getAppropriateHandler(client).handle(client, text)
        }
    }

    private fun isOurProduct(attachment: String): Boolean {
        return Json { ignoreUnknownKeys = true }.decodeFromString<Attachment>(attachment).type == "market" &&
                Json {
                    ignoreUnknownKeys = true
                }.decodeFromString<MarketAttachment>(attachment).market.category.id == productId
    }

    private suspend fun registerNewClient(clientId: Int): Unit = coroutineScope {
        async { clientsRepository.add(Client(clientId)) }
        async { sendGreetings(clientId) }
    }

    private suspend fun sendGreetings(peerId: Int) {
        vKApiClient.sendMessageSafely(
            peerId,
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ü§ñ\n" +
                    "üîπ –ï—Å–ª–∏ —É –í–∞—Å –≤–Ω–∏–∑—É –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ \"–°—Ç–∞—Ä—Ç\" –∏ \"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\", –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ —á—É—Ç—å –ø—Ä–∞–≤–µ–µ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±–µ—â–Ω–∏—è.\n" +
                    "üîπ –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–º, –∫–∞–∫ —Ç—É—Ç –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∂–º–∏—Ç–µ –Ω–∞ \"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\".\n" +
                    "üîπ –ï—Å–ª–∏ –∂–µ –í—ã –≤—Å–µ –ø–æ–Ω—è–ª–∏ –∏ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∏–Ω–∞—Ç—å, –∂–º–∏—Ç–µ \"–°—Ç–∞—Ä—Ç!\".",
            keyboard = pressStartKeyboard
        )
    }

    private fun getAppropriateHandler(client: Client): StateHandler {
        return when(client.status) {
            Status.NEW_CLIENT -> NewClientHandler(clientsRepository, vKApiClient)
            Status.WAITING_FOR_PLAN -> WaitingForPlanHandler(clientsRepository, vKApiClient)
            Status.WAITING_FOR_START -> WaitingForStartHandler(clientsRepository, vKApiClient, trainingPlansRepository)
            Status.ACTIVE -> ActiveClientHandler(clientsRepository, vKApiClient)
            Status.WAITING_FOR_RESULTS -> WaitingForResultsHandler(clientsRepository, vKApiClient, trainingPlansRepository, qiwiApiClient)
            else -> WaitingForPaymentHandler(clientsRepository, vKApiClient)
        }
    }
}





/*
suspend fun handleIncomingMessage(notification: String) = coroutineScope {
    val event = Json { ignoreUnknownKeys = true }.decodeFromString<EventWithMessage>(notification)
    val clientId = event.message.fromId
    val text = event.message.text
    val attachments = event.message.attachments

    println("Current number of threads = ${ManagementFactory.getThreadMXBean().threadCount}")

    val client = clientsRepository.findById(clientId)

    if (client == null && attachments.isNotEmpty() && isOurProduct(attachments[0].toString())) {
        async { clientsRepository.add(Client(clientId)) }
        async { sendGreetings(clientId) }
    } else if (client != null) {
        when (client.status) {
            Status.NEW_CLIENT -> {
                if (text == "–°—Ç–∞—Ä—Ç!") {
                    sendMainKeyboardWithoutPromocodes(clientId)
                    async { sendSelectTrainingPlan(clientId) }
                    async { clientsRepository.update(
                        clientId,
                        newStatus = Status.WAITING_FOR_PLAN
                    ) }
                } else {
                    sendMessage(
                        clientId,
                        "–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å, –∂–º–∏—Ç–µ \"–°—Ç–∞—Ä—Ç!\""
                    )
                }
            }
            Status.WAITING_FOR_PLAN -> {
                if (text == "6 —á–∞—Å–æ–≤" || text == "10 —á–∞—Å–æ–≤") {
                    async { clientsRepository.update(
                        clientId,
                        newStatus = Status.WAITING_FOR_START,
                        newTrainingPlan = TrainingPlan(
                            LocalDate.now().monthValue,
                            if (text == "6 —á–∞—Å–æ–≤") 6 else 10,
                            0
                        )
                    ) }
                    async { sendTrialMessage(clientId) }
                } else {
                    sendMessage(
                        clientId,
                        "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é —Ö–æ—Ç–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è."
                    )
                }
            }
            Status.WAITING_FOR_START -> {
                if (text == "–ù–∞—á–∞—Ç—å —Ü–∏–∫–ª") {
                    async { clientsRepository.update(
                        clientId,
                        newStatus = Status.ACTIVE,
                        newWeeksPassed = client.weeksPassed + 1
                    ) }
                    async { sendPlan(client) }
                } else {
                    sendMessage(
                        clientId,
                        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –∏ –Ω–∞—á–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª, –Ω–∞–∂–º–∏—Ç–µ \"–ù–∞—á–∞—Ç—å —Ü–∏–∫–ª\"."
                    )
                }
            }
            Status.ACTIVE -> {
                if (text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ü–∏–∫–ª") {
                    val phrases = listOf(
                        "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞!\n–ß—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é, –ø—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å.",
                        "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é, –ø—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å.",
                        "–ù–µ–¥–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é."
                    )
                    sendMessage(
                        clientId,
                        if (client.trial)
                            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –ø—Ä–æ–±–Ω–æ–π –Ω–µ–¥–µ–ª–∏!\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞, –ø—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å."
                        else
                            phrases.random()
                    )
                    async { clientsRepository.update(
                        clientId,
                        newStatus = Status.WAITING_FOR_RESULTS
                    ) }
                    async { sendInterviewQuestion(client, 0) }
                } else {
                    sendMessage(
                        clientId,
                        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, –Ω–∞–∂–º–∏—Ç–µ \"–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ü–∏–∫–ª\"."
                    )
                }
            }
            Status.WAITING_FOR_RESULTS -> {
                if (client.interviewResults.size == client.interview.interviewQuestions.size) { // he's already received 4 plans -> should wait until end of month
                    sendMessage(
                        clientId,
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Å—è—Ü–∞ –∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è."
                    )
                    return@coroutineScope
                }
                val answerNumber = client.interview.findAnswerNumberOnKthQuestion(text, client.interviewResults.size)
                if (answerNumber == -1) {
                    sendMessage(
                        clientId,
                        "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞."
                    )
                } else {
                    if (client.interview.interviewQuestions.size == 4 && client.interviewResults.size == 2 && answerNumber == 1) {
                        clientsRepository.update(
                            clientId,
                            newInterviewResults = (client.interviewResults + 1 + 1).toMutableList()
                        )
                    } else if (client.interview.interviewQuestions.size == 3 && client.interviewResults.size == 1 && answerNumber == 1) {
                        clientsRepository.update(
                            clientId,
                            newInterviewResults = (client.interviewResults + 1 + 1).toMutableList()
                        )
                    } else {
                        clientsRepository.update(
                            clientId,
                            newInterviewResults = (client.interviewResults + answerNumber).toMutableList()
                        )
                    }
                    val updatedClient = clientsRepository.findById(clientId) ?: throw Exception()
                    if (updatedClient.interviewResults.size == client.interview.interviewQuestions.size) {
                        val nextTrainingPlan = determineNextTrainingPlan(updatedClient)
                        if (nextTrainingPlan == null) {
                            sendMessage(
                                clientId,
                                "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä–µ—à–µ–Ω! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –∑–∞ –º–µ—Å—è—Ü –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ 4 –ø–ª–∞–Ω–∞. " +
                                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Å—è—Ü–∞ –∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è."
                            )
                        } else {
                            if (client.trial) {
                                clientsRepository.update(
                                    clientId,
                                    newStatus = Status.WAITING_FOR_PAYMENT,
                                    newTrainingPlan = nextTrainingPlan,
                                    newInterviewResults = mutableListOf()
                                )
                                client.updateBill()
                                requestPaymentToStart(client)
                            } else {
                                clientsRepository.update(
                                    clientId,
                                    newStatus = Status.WAITING_FOR_START,
                                    newTrainingPlan = nextTrainingPlan,
                                    newInterviewResults = mutableListOf()
                                )
                                val phrases = listOf(
                                    "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –í–∞—Å –±—ã–ª –ø–æ–¥–æ–±—Ä–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω.\n" +
                                            "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∏ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –Ω–∞–∂–º–∏—Ç–µ \"–ù–∞—á–∞—Ç—å —Ü–∏–∫–ª\".",
                                    "–û–ø—Ä–æ—Å –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –Ω–∏—Ö –¥–ª—è –í–∞—Å –±—ã–ª –ø–æ–¥–æ–±—Ä–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω.\n" +
                                            "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∏ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –Ω–∞–∂–º–∏—Ç–µ \"–ù–∞—á–∞—Ç—å —Ü–∏–∫–ª\"."
                                )
                                sendMessage(
                                    clientId,
                                    phrases.random()
                                )
                            }
                        }
                    } else {
                        sendInterviewQuestion(
                            client,
                            updatedClient.interviewResults.size
                        )
                    }
                }
            }
            Status.WAITING_FOR_PAYMENT -> {
                if (text == "228 337") {
                    confirmPayment(client, null)
                } else {
                    sendMessage(
                        clientId,
                        "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –æ–ø–ª–∞—Ç–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—Å–∫—É. " +
                                "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ \"–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\", –∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ - \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É\""
                    )
                }
            }
        }
    }
}





suspend fun sendMainKeyboardWithoutPromocodes(peerId: Int) {
    sendMessage(
        peerId,
        "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: –ø–æ–∫–∞ —á—Ç–æ –µ—Å—Ç—å 2 –æ–ø—Ü–∏–∏ - 6 –∏–ª–∏ 10 —á–∞—Å–æ–≤.",
        keyboard = mainKeyboardWithoutPromocodes
    )
}

suspend fun sendSelectTrainingPlan(peerId: Int) {
    sendMessage(
        peerId,
        "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é —É –í–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
        keyboard = selectHoursKeyboard
    )
}

suspend fun sendTrialMessage(peerId: Int) {
    sendMessage(
        peerId,
        "–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! –ß—Ç–æ–±—ã –í—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ, –Ω–µ —Ä–∏—Å–∫—É—é —Å–≤–æ–∏–º–∏ –¥–µ–Ω—å–≥–∞–º–∏, –ø–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è —É –Ω–∞—Å –≤ –ø–æ–¥–∞—Ä–æ–∫ üéÅ\n" +
                "–ù–∞–∂–º–∏—Ç–µ \"–ù–∞—á–∞—Ç—å —Ü–∏–∫–ª\", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –∏ –Ω–∞—á–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª."
    )
}

suspend fun sendPlan(client: Client) {
    val ids = client.trainingPlan.prepareAsAttachment(client.id)
    val phrases = listOf(
        "–•–æ—Ä–æ—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!",
        "–£–¥–∞—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!"
    )
    val phrase = if (client.trainingPlan.hours == 1)
        "–•–æ—Ä–æ—à–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!"
    else
        phrases.random()
    sendMessage(
        client.id,
        phrase,
        attachment = "doc${ids.first}_${ids.second}"
    )
}

suspend fun sendInterviewQuestion(client: Client, questionNumber: Int) {
    sendMessage(
        client.id,
        client.interview.interviewQuestions[questionNumber].question,
        keyboard = client.interview.interviewQuestions[questionNumber].toString()
    )
}

suspend fun requestPaymentToStart(client: Client) {
    sendMessage(
        client.id,
        "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!\n–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏—Ç—å –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –∏ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º!\n" +
                "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Å –æ–ø–ª–∞—Ç–æ–π, –Ω–∞–∂–º–∏—Ç–µ \"–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\". –ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–∂–º–∏—Ç–µ \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É\".",
        keyboard = getPaymentKeyboard(QiwiAPI.getPayUrl(client.billId))
    )
}*/

/**
 * 1. –°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –í–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞?
 *  - –£—Å—Ç–∞–ª / —É—Ç–æ–º–∏–ª—Å—è
 *  - –ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ
 *  - –ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ª–µ–≥–∫–æ
 * 2. –ù—É–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω –ª–µ–≥—á–µ / –º–µ–Ω—å—à–µ?
 *  - –î–∞
 *  - –ù–µ—Ç
 * 3. –ë–æ–ª–µ–ª–∏ –ª–∏ –í—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞?
 *  - –î–∞
 *  - –ù–µ—Ç
 * 4. –ù—É–∂–Ω–æ –ª–∏ –≤–∞–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ? (–≤ —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—Ç–∞ –ù–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å, —Ç—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç –ù–µ—Ç)
 *  - –î–∞
 *  - –ù–µ—Ç
 *
 *
 * –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞: –ù–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥ –æ—Ü–∏–∫–ª–∞, –ó–∞–∫–æ–Ω—á–∏–ª –≤—ã–∞–ø–ª–Ω–µ–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–≤–∞ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
 * –î–µ–Ω—å–≥–∏ —Å–æ–±–∏—Ä–∞—Ç—å –≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
 * –ú–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –ø–ª–∞–Ω —Ç–æ–ª—å–∫–æ 4 —Ä–∞–∑–∞ –∑–∞ –º–µ—Å—è—Ü
 * –ó–∞–±–∏–≤–∞–µ–º –Ω–∞ 3 —á–∞—Å–∞
 *
 * "action": {
"type": "vkpay",
"payload": "{\"button\": \"1\"}",
"hash": "action=pay-to-user&amount=5&description=aaaa&user_id=15733972&aid=7889001"
}
 *
 *  - –ü—Ä–æ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è
 *  - –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–æ–º–æ–∫–æ–¥—ã
 *  - 29 –∏—é–ª—è
 *
 *
 */
