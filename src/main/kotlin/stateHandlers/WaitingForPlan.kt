package stateHandlers

import Client
import ClientsRepository
import TrainingPlan
import VKApiClient
import kotlinx.coroutines.async
import kotlinx.coroutines.coroutineScope
import java.time.LocalDate

class WaitingForPlanHandler(
    private val clientsRepository: ClientsRepository,
    private val vkApiClient: VKApiClient
) : StateHandler(clientsRepository, vkApiClient) {

    override suspend fun handle(client: Client, text: String): Unit = coroutineScope {
        if (text == "6 —á–∞—Å–æ–≤" || text == "10 —á–∞—Å–æ–≤") {
            async { clientsRepository.update(
                client.id,
                newStatus = Status.WAITING_FOR_START,
                newTrainingPlan = TrainingPlan(
                    LocalDate.now().monthValue,
                    if (text == "6 —á–∞—Å–æ–≤") 6 else 10,
                    0
                )
            ) }
            async { sendTrialMessage(client.id) }
        } else {
            vkApiClient.sendMessage(
                client.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é —Ö–æ—Ç–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è."
            )
        }
    }

    private suspend fun sendTrialMessage(peerId: Int) {
        vkApiClient.sendMessage(
            peerId,
            "–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! –ß—Ç–æ–±—ã –í—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ, –Ω–µ —Ä–∏—Å–∫—É—é —Å–≤–æ–∏–º–∏ –¥–µ–Ω—å–≥–∞–º–∏, –ø–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è —É –Ω–∞—Å –≤ –ø–æ–¥–∞—Ä–æ–∫ üéÅ\n" +
                    "–ù–∞–∂–º–∏—Ç–µ \"–ù–∞—á–∞—Ç—å —Ü–∏–∫–ª\", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –∏ –Ω–∞—á–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª."
        )
    }
}