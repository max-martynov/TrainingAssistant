package stateHandlers

import Client
import ClientsRepository
import TrainingPlansRepository
import api.vk.VKApiClient
import io.ktor.client.features.*
import kotlinx.coroutines.async
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.delay
import java.time.LocalDateTime


class WaitingForStartHandler(
    private val clientsRepository: ClientsRepository,
    private val vkApiClient: VKApiClient,
    private val trainingPlansRepository: TrainingPlansRepository
) : StateHandler(clientsRepository, vkApiClient) {

    override suspend fun handle(client: Client, text: String): Unit = coroutineScope {
        if (text == "–ù–∞—á–∞—Ç—å —Ü–∏–∫–ª") {
            async { clientsRepository.update(
                client.id,
                newStatus = Status.ACTIVE,
                newWeeksPassed = client.weeksPassed + 1,
                newInterviewResults = mutableListOf()
            ) }
            async { sendPlan(client) }
        } else {
            vkApiClient.sendMessageSafely(
                client.id,
                "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –∏ –Ω–∞—á–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª, –Ω–∞–∂–º–∏—Ç–µ \"–ù–∞—á–∞—Ç—å —Ü–∏–∫–ª\"."
            )
        }
    }

    private suspend fun sendPlan(client: Client) {
        val phrases = listOf(
            "–•–æ—Ä–æ—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí™",
            "–£–¥–∞—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!",
            "–ñ–µ–ª–∞—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –Ω–µ–¥–µ–ª–∏!",
            "–¢–æ–ª—å–∫–æ –≤–ø–µ—Ä–µ–¥ ü•á",
            "–û—Ç–ª–∏—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üèÜ"
        )
        val phrase = if (client.trainingPlan.hours == 1)
            "–•–æ—Ä–æ—à–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!"
        else
            phrases.random()
        var attachment = ""
        try {
            attachment = vkApiClient.convertFileToAttachment(
                trainingPlansRepository.getPathToFile(client.trainingPlan),
                client
            )
        } catch (e: ResponseException) {
            println("${LocalDateTime.now()}: Exception while loading a document event answer - ${e.message}\nRetrying...")
            delay(1000L)
            try {
                attachment = vkApiClient.convertFileToAttachment(
                    trainingPlansRepository.getPathToFile(client.trainingPlan),
                    client
                )
            } catch (e: ResponseException) {
                println("${LocalDateTime.now()}: Still exception - ${e.message}\n")
            }
        }
        vkApiClient.sendMessageSafely(
            client.id,
            phrase,
            attachment = attachment
        )
    }
}