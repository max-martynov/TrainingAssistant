package stateHandlers

import client.Client
import ClientsRepository
import api.vk.VKApiClient
import client.Status
import keyboards.GoToPlanKeyboard
import keyboards.HowWasPlanKeyboard
import keyboards.MainActivityKeyboard
import keyboards.YesNoKeyboard
import kotlinx.coroutines.async
import kotlinx.coroutines.coroutineScope

class ActiveClientHandler(
    private val clientsRepository: ClientsRepository,
    private val vkApiClient: VKApiClient
) : StateHandler() {

    override suspend fun handle(client: Client, text: String): Unit = coroutineScope {
        if (text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–ª–∞–Ω") {
            val phrasesPart1 = listOf(
                "–û—Ç–ª–∏—á–Ω–æ üî•\n",
                "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞ üí™\n",
                "–ù–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω üòé\n"
            )
            val phrasesPart2 = listOf(
                "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π \"–ù–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É\".\n",
                "–í–æ–∑–º–æ–∂–Ω–æ, —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫? –ù–µ –±–æ–π—Ç–µ—Å—å –∑–∞–¥–∞—Ç—å –µ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É\".\n",
                "–ï—Å–ª–∏ –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –í–∞—Å —á–µ–º-—Ç–æ –Ω–µ —É—Ç—Ä–æ–∏–ª –∏–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ–π \"–ù–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É\".\n"
            )
            val phrasesPart3 = listOf(
                "–ê —á—Ç–æ–±—ã –æ–±–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø–ª–∞–Ω–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é, –Ω–∞–∂–º–∏—Ç–µ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                "–ê —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            )
            vkApiClient.sendMessageSafely(
                client.id,
                phrasesPart1.random() + phrasesPart2.random() + phrasesPart3.random(),
                keyboard = GoToPlanKeyboard().getKeyboard()
            )
        } else if (text == "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞–Ω–∞") {
            async { clientsRepository.update(
                client.id,
                newStatus = Status.COMPLETING_INTERVIEW0,
                newWeeksPassed = client.weeksPassed + 1
            ) }
            async { sendFirstQuestion(client) }
        } else {
            vkApiClient.sendMessageSafely(
                client.id,
                "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–ª–∞–Ω\"."
            )
        }
    }

    private suspend fun sendFirstQuestion(client: Client) {
        if (client.hasCompetition) {
            vkApiClient.sendMessageSafely(
                client.id,
                "–ü—Ä–æ–±–µ–∂–∞–ª–∏ –ª–∏ –í—ã —Å—Ç–∞—Ä—Ç?",
                keyboard = YesNoKeyboard().getKeyboard()
            )
        } else {
            val questions = listOf(
                "–ö–∞–∫ –æ—Ü–µ–Ω–∏—Ç–µ –í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞?",
                "–ö–∞–∫ –í–∞–º –¥–∞–ª—Å—è —ç—Ç–æ—Ç –ø–ª–∞–Ω?"
            )
            vkApiClient.sendMessageSafely(
                client.id,
                questions.random(),
                keyboard = HowWasPlanKeyboard().getKeyboard()
            )
        }
    }
}
